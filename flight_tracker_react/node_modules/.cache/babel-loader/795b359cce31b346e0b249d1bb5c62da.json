{"ast":null,"code":"var _jsxFileName = \"/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/pages/ResultsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from 'react-router-dom';\nimport { Table, Container, Row, Col, Button, Form, Navbar } from 'react-bootstrap';\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultsPage() {\n  _s();\n\n  // retrieve payload from HomePage via useNavigate\n  const location = useLocation(); // initialize state variables\n\n  const [displayData, setDisplayData] = useState([]);\n  const [passData, setPassData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  let flightParams = location.state.flights['request']['params'];\n  let flightData = location.state.flights['data'];\n  let carrierCodes = [];\n  let prices = [];\n  let totalData = [];\n  let airCarrierCode = ''; // fetches results route to store flight data to database\n\n  const createFlightResults = async () => {\n    const newFlightResults = passData;\n    const response = await fetch('/results', {\n      method: 'POST',\n      body: JSON.stringify(newFlightResults),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); // error handling with response status check\n\n    if (response.status !== 201) {\n      alert(`Failed to add the flights. Status code = ${response.status}`);\n    }\n  }; // calls the carrier route to call Amadeus API to translate IATA code to air carrier business name\n\n\n  const getAirCarrier = async carrier_code => {\n    let data = null; // fetch air carrier name via IATA code through Amadeus API\n\n    await fetch('/carrier', {\n      method: 'POST',\n      body: JSON.stringify(carrier_code),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(payload_data => {\n      //console.log(payload_data);\n      data = payload_data;\n    });\n    return data;\n  }; // retrieves relevant data from payload and displays data on table on ResultsPage.\n  // then sets passData state variable to array of all flights.\n\n\n  const loadFlight = async () => {\n    const delay = function () {\n      let ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return new Promise(r => setTimeout(r, ms));\n    };\n\n    for (let i = 0; i < flightData.length; i++) {\n      let dict = {}; // store IATA code for getAirCarrier function\n\n      airCarrierCode = flightData[i]['validatingAirlineCodes'][0]; // call getAirCarrier function, and retrieve air carrier name based on IATA code\n\n      await delay();\n      const result = await getAirCarrier({\n        airCarrierCode\n      }); // append all relevant table data to dict\n\n      dict._id = flightData[i]['id'];\n      dict.airCarrier = result['data'][0]['businessName'];\n      dict.departAirport = flightParams['originLocationCode'];\n      dict.arriveAirport = flightParams['destinationLocationCode'];\n      dict.departDate = flightParams['departureDate'];\n      dict.returnDate = flightParams['returnDate'];\n      dict.price = flightData[i]['price']['total'];\n      dict.seatsLeft = flightData[i]['numberOfBookableSeats']; // if price is unique, add dictionary to dict\n\n      if (prices.includes(flightData[i]['price']['total']) !== true) {\n        totalData.push(dict);\n      } // if carrier code is unique, append to carrierCodes array\n\n\n      if (carrierCodes.includes(airCarrierCode) !== true) {\n        carrierCodes.push(airCarrierCode);\n      } // if price is unique, append to prices array\n\n\n      if (prices.includes(flightData[i]['price']['total']) !== true) {\n        prices.push(flightData[i]['price']['total']);\n      }\n    } // set the state variable to pass the data to the database.\n\n\n    setPassData(totalData);\n    return totalData;\n  }; // renders page and updates page on each displayData state variable update\n\n\n  useEffect(() => {\n    (async () => {\n      const data = await loadFlight();\n\n      if (data) {\n        setDisplayData(data);\n        createFlightResults();\n      }\n\n      setLoading(false);\n    })(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"dark\",\n      variant: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          href: \"/results\",\n          children: \"Flight Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Air Carrier\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Departing Airport\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Arriving Airport\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Departing Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Return Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Seats Left\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 29\n            }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: displayData.map(data => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.airCarrier\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.departAirport\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.arriveAirport\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.departDate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.returnDate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: data.seatsLeft\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 41\n                }, this)]\n              }, data._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                children: \"Back To Homepage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ResultsPage, \"wDhGBaF0kO1zVk2HqLdprHhTfpQ=\", false, function () {\n  return [useLocation];\n});\n\n_c = ResultsPage;\nexport default ResultsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"sources":["/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/pages/ResultsPage.js"],"names":["React","useEffect","useState","Link","useLocation","Table","Container","Row","Col","Button","Form","Navbar","LoadingSpinner","ResultsPage","location","displayData","setDisplayData","passData","setPassData","loading","setLoading","flightParams","state","flights","flightData","carrierCodes","prices","totalData","airCarrierCode","createFlightResults","newFlightResults","response","fetch","method","body","JSON","stringify","headers","status","alert","getAirCarrier","carrier_code","data","then","json","payload_data","loadFlight","delay","ms","Promise","r","setTimeout","i","length","dict","result","_id","airCarrier","departAirport","arriveAirport","departDate","returnDate","price","seatsLeft","includes","push","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from 'react-router-dom';\nimport { Table, Container, Row, Col, Button, Form, Navbar } from 'react-bootstrap';\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\n\n\nfunction ResultsPage() {\n\n    // retrieve payload from HomePage via useNavigate\n    const location = useLocation();\n\n    // initialize state variables\n    const [displayData, setDisplayData] = useState([]);\n    const [passData, setPassData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    let flightParams = location.state.flights['request']['params'];\n    let flightData = location.state.flights['data'];\n    let carrierCodes = [];\n    let prices = [];\n    let totalData = [];\n    let airCarrierCode = '';\n\n    // fetches results route to store flight data to database\n    const createFlightResults = async () => {\n        const newFlightResults = passData;\n        const response = await fetch('/results', {\n            method: 'POST', \n            body: JSON.stringify(newFlightResults),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        // error handling with response status check\n        if (response.status !== 201) {\n            alert(`Failed to add the flights. Status code = ${response.status}`);\n        }\n    }\n\n    \n    // calls the carrier route to call Amadeus API to translate IATA code to air carrier business name\n    const getAirCarrier = async(carrier_code) => {\n        let data = null\n\n        // fetch air carrier name via IATA code through Amadeus API\n        await fetch('/carrier', {\n            method: 'POST', \n            body: JSON.stringify(carrier_code),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        .then(response => response.json())\n        .then(payload_data => {\n            //console.log(payload_data);\n            data = payload_data;\n        })\n\n        return data;\n    }\n\n    // retrieves relevant data from payload and displays data on table on ResultsPage.\n    // then sets passData state variable to array of all flights.\n    const loadFlight = async () => {\n        const delay = (ms = 1000) => new Promise((r) => setTimeout(r, ms));\n\n        for (let i = 0; i < flightData.length; i++) {\n            let dict = {}\n\n            // store IATA code for getAirCarrier function\n            airCarrierCode = flightData[i]['validatingAirlineCodes'][0];\n\n            // call getAirCarrier function, and retrieve air carrier name based on IATA code\n            await delay();\n            const result = await getAirCarrier({airCarrierCode});\n\n            // append all relevant table data to dict\n            dict._id = flightData[i]['id'];\n            dict.airCarrier = result['data'][0]['businessName'];\n            dict.departAirport = flightParams['originLocationCode'];\n            dict.arriveAirport = flightParams['destinationLocationCode'];\n            dict.departDate = flightParams['departureDate'];\n            dict.returnDate = flightParams['returnDate'];\n            dict.price = flightData[i]['price']['total'];\n            dict.seatsLeft = flightData[i]['numberOfBookableSeats'];\n            \n            // if price is unique, add dictionary to dict\n            if (prices.includes(flightData[i]['price']['total']) !== true) {\n                totalData.push(dict);\n            }\n            // if carrier code is unique, append to carrierCodes array\n            if (carrierCodes.includes(airCarrierCode) !== true) {\n                carrierCodes.push(airCarrierCode);\n            }\n            // if price is unique, append to prices array\n            if (prices.includes(flightData[i]['price']['total']) !== true) {\n                prices.push(flightData[i]['price']['total']);\n            }\n        }\n\n        // set the state variable to pass the data to the database.\n        setPassData(totalData);\n\n        return totalData\n    }\n\n    // renders page and updates page on each displayData state variable update\n    useEffect(() => {\n        (async () => {\n            const data = await loadFlight();\n            if (data) {\n                setDisplayData(data);\n                createFlightResults();\n            }\n            setLoading(false);\n        })();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"results\">\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"/results\">\n                    Flight Results\n                    </Navbar.Brand>\n                </Container>\n            </Navbar>\n            <Container>\n                <Form className=\"mt-3\">\n                    <Row>\n                        <Table>\n                            <thead>\n                                <tr>\n                                    <th>Air Carrier</th>\n                                    <th>Departing Airport</th>\n                                    <th>Arriving Airport</th>\n                                    <th>Departing Date</th>\n                                    <th>Return Date</th>\n                                    <th>Price</th>\n                                    <th>Seats Left</th>\n                                </tr>\n                            </thead>\n                            {loading ? <LoadingSpinner /> : \n                            <tbody>\n                                {displayData.map((data) => (\n                                    <tr key={data._id}>\n                                        <td>{data.airCarrier}</td>\n                                        <td>{data.departAirport}</td>\n                                        <td>{data.arriveAirport}</td>\n                                        <td>{data.departDate}</td>\n                                        <td>{data.returnDate}</td>\n                                        <td>{data.price}</td>\n                                        <td>{data.seatsLeft}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                            }\n                        </Table>\n                    </Row>\n                    <Row className=\"mt-3\">\n                        <Col>\n                            <Link to=\"/\">\n                                <Button>Back To Homepage</Button>\n                            </Link>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </div>           \n    );\n}\n\nexport default ResultsPage;\n"]},"metadata":{},"sourceType":"module"}