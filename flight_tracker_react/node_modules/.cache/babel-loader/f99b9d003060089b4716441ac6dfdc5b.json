{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PythonShell = exports.NewlineTransformer = exports.PythonShellError = void 0;\n\nconst events_1 = require(\"events\");\n\nconst child_process_1 = require(\"child_process\");\n\nconst os_1 = require(\"os\");\n\nconst path_1 = require(\"path\");\n\nconst stream_1 = require(\"stream\");\n\nconst fs_1 = require(\"fs\");\n\nconst util_1 = require(\"util\");\n\nfunction toArray(source) {\n  if (typeof source === 'undefined' || source === null) {\n    return [];\n  } else if (!Array.isArray(source)) {\n    return [source];\n  }\n\n  return source;\n}\n/**\r\n * adds arguments as properties to obj\r\n */\n\n\nfunction extend(obj) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  Array.prototype.slice.call(arguments, 1).forEach(function (source) {\n    if (source) {\n      for (let key in source) {\n        obj[key] = source[key];\n      }\n    }\n  });\n  return obj;\n}\n/**\r\n * gets a random int from 0-10000000000\r\n */\n\n\nfunction getRandomInt() {\n  return Math.floor(Math.random() * 10000000000);\n}\n\nconst execPromise = (0, util_1.promisify)(child_process_1.exec);\n\nclass PythonShellError extends Error {}\n\nexports.PythonShellError = PythonShellError;\n/**\r\n * Takes in a string stream and emits batches seperated by newlines\r\n */\n\nclass NewlineTransformer extends stream_1.Transform {\n  _transform(chunk, encoding, callback) {\n    let data = chunk.toString();\n    if (this._lastLineData) data = this._lastLineData + data;\n    const lines = data.split(os_1.EOL);\n    this._lastLineData = lines.pop(); //@ts-ignore this works, node ignores the encoding if it's a number\n\n    lines.forEach(this.push.bind(this));\n    callback();\n  }\n\n  _flush(done) {\n    if (this._lastLineData) this.push(this._lastLineData);\n    this._lastLineData = null;\n    done();\n  }\n\n}\n\nexports.NewlineTransformer = NewlineTransformer;\n/**\r\n * An interactive Python shell exchanging data through stdio\r\n * @param {string} script    The python script to execute\r\n * @param {object} [options] The launch options (also passed to child_process.spawn)\r\n * @param [stdoutSplitter] Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n * @param [stderrSplitter] Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n * @constructor\r\n */\n\nclass PythonShell extends events_1.EventEmitter {\n  /**\r\n   * spawns a python process\r\n   * @param scriptPath path to script. Relative to current directory or options.scriptFolder if specified\r\n   * @param options\r\n   * @param stdoutSplitter Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n   * @param stderrSplitter Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n   */\n  constructor(scriptPath, options) {\n    let stdoutSplitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let stderrSplitter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    super();\n    /**\r\n     * returns either pythonshell func (if val string) or custom func (if val Function)\r\n     */\n\n    function resolve(type, val) {\n      if (typeof val === 'string') {\n        // use a built-in function using its name\n        return PythonShell[type][val];\n      } else if (typeof val === 'function') {\n        // use a custom function\n        return val;\n      }\n    }\n\n    if (scriptPath.trim().length == 0) throw Error(\"scriptPath cannot be empty! You must give a script for python to run\");\n    let self = this;\n    let errorData = '';\n    events_1.EventEmitter.call(this);\n    options = extend({}, PythonShell.defaultOptions, options);\n    let pythonPath;\n\n    if (!options.pythonPath) {\n      pythonPath = PythonShell.defaultPythonPath;\n    } else pythonPath = options.pythonPath;\n\n    let pythonOptions = toArray(options.pythonOptions);\n    let scriptArgs = toArray(options.args);\n    this.scriptPath = (0, path_1.join)(options.scriptPath || '', scriptPath);\n    this.command = pythonOptions.concat(this.scriptPath, scriptArgs);\n    this.mode = options.mode || 'text';\n    this.formatter = resolve('format', options.formatter || this.mode);\n    this.parser = resolve('parse', options.parser || this.mode); // We don't expect users to ever format stderr as JSON so we default to text mode\n\n    this.stderrParser = resolve('parse', options.stderrParser || 'text');\n    this.terminated = false;\n    this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);\n    ['stdout', 'stdin', 'stderr'].forEach(function (name) {\n      self[name] = self.childProcess[name];\n      self.parser && self[name] && self[name].setEncoding(options.encoding || 'utf8');\n    }); // Node buffers stdout&stderr in batches regardless of newline placement\n    // This is troublesome if you want to recieve distinct individual messages\n    // for example JSON parsing breaks if it recieves partial JSON\n    // so we use newlineTransformer to emit each batch seperated by newline\n\n    if (this.parser && this.stdout) {\n      if (!stdoutSplitter) stdoutSplitter = new NewlineTransformer(); // note that setting the encoding turns the chunk into a string\n\n      stdoutSplitter.setEncoding(options.encoding || 'utf8');\n      this.stdout.pipe(stdoutSplitter).on('data', chunk => {\n        this.emit('message', self.parser(chunk));\n      });\n    } // listen to stderr and emit errors for incoming data\n\n\n    if (this.stderrParser && this.stderr) {\n      if (!stderrSplitter) stderrSplitter = new NewlineTransformer(); // note that setting the encoding turns the chunk into a string\n\n      stderrSplitter.setEncoding(options.encoding || 'utf8');\n      this.stderr.pipe(stderrSplitter).on('data', chunk => {\n        this.emit('stderr', self.stderrParser(chunk));\n      });\n    }\n\n    if (this.stderr) {\n      this.stderr.on('data', function (data) {\n        errorData += '' + data;\n      });\n      this.stderr.on('end', function () {\n        self.stderrHasEnded = true;\n        terminateIfNeeded();\n      });\n    } else {\n      self.stderrHasEnded = true;\n    }\n\n    if (this.stdout) {\n      this.stdout.on('end', function () {\n        self.stdoutHasEnded = true;\n        terminateIfNeeded();\n      });\n    } else {\n      self.stdoutHasEnded = true;\n    }\n\n    this.childProcess.on('error', function (err) {\n      self.emit('error', err);\n    });\n    this.childProcess.on('exit', function (code, signal) {\n      self.exitCode = code;\n      self.exitSignal = signal;\n      terminateIfNeeded();\n    });\n\n    function terminateIfNeeded() {\n      if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null) return;\n      let err;\n\n      if (self.exitCode && self.exitCode !== 0) {\n        if (errorData) {\n          err = self.parseError(errorData);\n        } else {\n          err = new PythonShellError('process exited with code ' + self.exitCode);\n        }\n\n        err = extend(err, {\n          executable: pythonPath,\n          options: pythonOptions.length ? pythonOptions : null,\n          script: self.scriptPath,\n          args: scriptArgs.length ? scriptArgs : null,\n          exitCode: self.exitCode\n        }); // do not emit error if only a callback is used\n\n        if (self.listeners('pythonError').length || !self._endCallback) {\n          self.emit('pythonError', err);\n        }\n      }\n\n      self.terminated = true;\n      self.emit('close');\n      self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);\n    }\n\n    ;\n  }\n  /**\r\n   * checks syntax without executing code\r\n   * @returns rejects promise w/ string error output if syntax failure\r\n   */\n\n\n  static checkSyntax(code) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const randomInt = getRandomInt();\n      const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;\n      const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);\n      return writeFilePromise(filePath, code).then(() => {\n        return this.checkSyntaxFile(filePath);\n      });\n    });\n  }\n\n  static getPythonPath() {\n    return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;\n  }\n  /**\r\n   * checks syntax without executing code\r\n   * @returns {Promise} rejects w/ stderr if syntax failure\r\n   */\n\n\n  static checkSyntaxFile(filePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pythonPath = this.getPythonPath();\n      let compileCommand = `${pythonPath} -m py_compile ${filePath}`;\n      return execPromise(compileCommand);\n    });\n  }\n  /**\r\n   * Runs a Python script and returns collected messages\r\n   * @param  {string}   scriptPath   The path to the script to execute\r\n   * @param  {Options}   options  The execution options\r\n   * @param  {Function} callback The callback function to invoke with the script results\r\n   * @return {PythonShell}       The PythonShell instance\r\n   */\n\n\n  static run(scriptPath, options, callback) {\n    let pyshell = new PythonShell(scriptPath, options);\n    let output = [];\n    return pyshell.on('message', function (message) {\n      output.push(message);\n    }).end(function (err) {\n      return callback(err ? err : null, output.length ? output : null);\n    });\n  }\n\n  /**\r\n   * Runs the inputted string of python code and returns collected messages. DO NOT ALLOW UNTRUSTED USER INPUT HERE!\r\n   * @param  {string}   code   The python code to execute\r\n   * @param  {Options}   options  The execution options\r\n   * @param  {Function} callback The callback function to invoke with the script results\r\n   * @return {PythonShell}       The PythonShell instance\r\n   */\n  static runString(code, options, callback) {\n    // put code in temp file\n    const randomInt = getRandomInt();\n    const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;\n    (0, fs_1.writeFileSync)(filePath, code);\n    return PythonShell.run(filePath, options, callback);\n  }\n\n  static getVersion(pythonPath) {\n    if (!pythonPath) pythonPath = this.getPythonPath();\n    return execPromise(pythonPath + \" --version\");\n  }\n\n  static getVersionSync(pythonPath) {\n    if (!pythonPath) pythonPath = this.getPythonPath();\n    return (0, child_process_1.execSync)(pythonPath + \" --version\").toString();\n  }\n  /**\r\n   * Parses an error thrown from the Python process through stderr\r\n   * @param  {string|Buffer} data The stderr contents to parse\r\n   * @return {Error} The parsed error with extended stack trace when traceback is available\r\n   */\n\n\n  parseError(data) {\n    let text = '' + data;\n    let error;\n\n    if (/^Traceback/.test(text)) {\n      // traceback data is available\n      let lines = text.trim().split(os_1.EOL);\n      let exception = lines.pop();\n      error = new PythonShellError(exception);\n      error.traceback = data; // extend stack trace\n\n      error.stack += os_1.EOL + '    ----- Python Traceback -----' + os_1.EOL + '  ';\n      error.stack += lines.slice(1).join(os_1.EOL + '  ');\n    } else {\n      // otherwise, create a simpler error with stderr contents\n      error = new PythonShellError(text);\n    }\n\n    return error;\n  }\n\n  /**\r\n   * Sends a message to the Python shell through stdin\r\n   * Override this method to format data to be sent to the Python process\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  send(message) {\n    if (!this.stdin) throw new Error(\"stdin not open for writing\");\n    let data = this.formatter ? this.formatter(message) : message;\n    if (this.mode !== 'binary') data += os_1.EOL;\n    this.stdin.write(data);\n    return this;\n  }\n\n  /**\r\n   * Closes the stdin stream. Unless python is listening for stdin in a loop\r\n   * this should cause the process to finish its work and close.\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  end(callback) {\n    if (this.childProcess.stdin) {\n      this.childProcess.stdin.end();\n    }\n\n    this._endCallback = callback;\n    return this;\n  }\n\n  /**\r\n   * Sends a kill signal to the process\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  kill(signal) {\n    this.terminated = this.childProcess.kill(signal);\n    return this;\n  }\n\n  /**\r\n   * Alias for kill.\r\n   * @deprecated\r\n   */\n  terminate(signal) {\n    // todo: remove this next breaking release\n    return this.kill(signal);\n  }\n\n}\n\nexports.PythonShell = PythonShell; // starting 2020 python2 is deprecated so we choose 3 as default\n\nPythonShell.defaultPythonPath = process.platform != \"win32\" ? \"python3\" : \"python\";\nPythonShell.defaultOptions = {}; //allow global overrides for options\n// built-in formatters\n\nPythonShell.format = {\n  text: function toText(data) {\n    if (!data) return '';else if (typeof data !== 'string') return data.toString();\n    return data;\n  },\n  json: function toJson(data) {\n    return JSON.stringify(data);\n  }\n}; //built-in parsers\n\nPythonShell.parse = {\n  text: function asText(data) {\n    return data;\n  },\n  json: function asJson(data) {\n    return JSON.parse(data);\n  }\n};\n;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,SAASA,OAAT,CAAoBC,MAApB,EAAoC;AAChC,MAAI,OAAOA,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,KAAK,IAAhD,EAAsD;AAClD,WAAO,EAAP;AACH,GAFD,MAEO,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4B;AAC/B,WAAO,CAACA,MAAD,CAAP;AACH;;AACD,SAAOA,MAAP;AACH;AAED;;;;;AAGA,SAASG,MAAT,CAAgBC,GAAhB,EAAgC;AAAA,oCAAJC,IAAI;AAAJA,QAAI;AAAA;;AAC5BJ,OAAK,CAACK,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,UAAUV,MAAV,EAAgB;AAC7D,QAAIA,MAAJ,EAAY;AACR,WAAK,IAAIW,GAAT,IAAgBX,MAAhB,EAAwB;AACpBI,WAAG,CAACO,GAAD,CAAH,GAAWX,MAAM,CAACW,GAAD,CAAjB;AACH;AACJ;AACJ,GAND;AAOA,SAAOP,GAAP;AACH;AAED;;;;;AAGA,SAASQ,YAAT,GAAqB;AACjB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAAP;AACH;;AAED,MAAMC,WAAW,GAAG,sBAAUC,oBAAV,CAApB;;AA0BA,MAAaC,gBAAb,SAAsCC,KAAtC,CAA2C;;AAA3CC;AAKA;;;;AAGA,MAAaC,kBAAb,SAAwCC,kBAAxC,CAAiD;AAG7CC,YAAU,CAACC,KAAD,EAAaC,QAAb,EAA+BC,QAA/B,EAA0D;AAChE,QAAIC,IAAI,GAAWH,KAAK,CAACI,QAAN,EAAnB;AACA,QAAI,KAAKC,aAAT,EAAwBF,IAAI,GAAG,KAAKE,aAAL,GAAqBF,IAA5B;AACxB,UAAMG,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWC,QAAX,CAAd;AACA,SAAKH,aAAL,GAAqBC,KAAK,CAACG,GAAN,EAArB,CAJgE,CAKhE;;AACAH,SAAK,CAACpB,OAAN,CAAc,KAAKwB,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAd;AACAT,YAAQ;AACX;;AACDU,QAAM,CAACC,IAAD,EAAwB;AAC1B,QAAI,KAAKR,aAAT,EAAwB,KAAKK,IAAL,CAAU,KAAKL,aAAf;AACxB,SAAKA,aAAL,GAAqB,IAArB;AACAQ,QAAI;AACP;;AAhB4C;;AAAjDjB;AAmBA;;;;;;;;;AAQA,MAAakB,WAAb,SAAiCC,qBAAjC,CAA6C;AAwBzC;;;;;;;AAOAC,cAAYC,UAAZ,EAAgCC,OAAhC,EAAqH;AAAA,QAAlEC,cAAkE,uEAAtC,IAAsC;AAAA,QAAhCC,cAAgC,uEAAJ,IAAI;AACjH;AAEA;;;;AAGA,aAASC,OAAT,CAAiBC,IAAjB,EAAuBC,GAAvB,EAA6C;AACzC,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB;AACA,eAAOT,WAAW,CAACQ,IAAD,CAAX,CAAkBC,GAAlB,CAAP;AACH,OAHD,MAGO,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAClC;AACA,eAAOA,GAAP;AACH;AACJ;;AAED,QAAIN,UAAU,CAACO,IAAX,GAAkBC,MAAlB,IAA4B,CAAhC,EAAmC,MAAM9B,KAAK,CAAC,sEAAD,CAAX;AAEnC,QAAI+B,IAAI,GAAG,IAAX;AACA,QAAIC,SAAS,GAAG,EAAhB;AACAZ,0BAAa/B,IAAb,CAAkB,IAAlB;AAEAkC,WAAO,GAAYvC,MAAM,CAAC,EAAD,EAAKmC,WAAW,CAACc,cAAjB,EAAiCV,OAAjC,CAAzB;AACA,QAAIW,UAAJ;;AACA,QAAI,CAACX,OAAO,CAACW,UAAb,EAAyB;AACrBA,gBAAU,GAAGf,WAAW,CAACgB,iBAAzB;AACH,KAFD,MAEOD,UAAU,GAAGX,OAAO,CAACW,UAArB;;AACP,QAAIE,aAAa,GAAGxD,OAAO,CAAC2C,OAAO,CAACa,aAAT,CAA3B;AACA,QAAIC,UAAU,GAAGzD,OAAO,CAAC2C,OAAO,CAACrC,IAAT,CAAxB;AAEA,SAAKoC,UAAL,GAAkB,iBAAKC,OAAO,CAACD,UAAR,IAAsB,EAA3B,EAA+BA,UAA/B,CAAlB;AACA,SAAKgB,OAAL,GAAeF,aAAa,CAACG,MAAd,CAAqB,KAAKjB,UAA1B,EAAsCe,UAAtC,CAAf;AACA,SAAKG,IAAL,GAAYjB,OAAO,CAACiB,IAAR,IAAgB,MAA5B;AACA,SAAKC,SAAL,GAAiBf,OAAO,CAAC,QAAD,EAAWH,OAAO,CAACkB,SAAR,IAAqB,KAAKD,IAArC,CAAxB;AACA,SAAKE,MAAL,GAAchB,OAAO,CAAC,OAAD,EAAUH,OAAO,CAACmB,MAAR,IAAkB,KAAKF,IAAjC,CAArB,CAlCiH,CAmCjH;;AACA,SAAKG,YAAL,GAAoBjB,OAAO,CAAC,OAAD,EAAUH,OAAO,CAACoB,YAAR,IAAwB,MAAlC,CAA3B;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,YAAL,GAAoB,2BAAMX,UAAN,EAAkB,KAAKI,OAAvB,EAAgCf,OAAhC,CAApB;AAEA,KAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,EAA8BhC,OAA9B,CAAsC,UAAUuD,IAAV,EAAc;AAChDf,UAAI,CAACe,IAAD,CAAJ,GAAaf,IAAI,CAACc,YAAL,CAAkBC,IAAlB,CAAb;AACAf,UAAI,CAACW,MAAL,IAAeX,IAAI,CAACe,IAAD,CAAnB,IAA6Bf,IAAI,CAACe,IAAD,CAAJ,CAAWC,WAAX,CAAuBxB,OAAO,CAACjB,QAAR,IAAoB,MAA3C,CAA7B;AACH,KAHD,EAxCiH,CA6CjH;AACA;AACA;AACA;;AACA,QAAI,KAAKoC,MAAL,IAAe,KAAKM,MAAxB,EAAgC;AAC5B,UAAG,CAACxB,cAAJ,EAAoBA,cAAc,GAAG,IAAItB,kBAAJ,EAAjB,CADQ,CAE5B;;AACAsB,oBAAc,CAACuB,WAAf,CAA2BxB,OAAO,CAACjB,QAAR,IAAoB,MAA/C;AACA,WAAK0C,MAAL,CAAYC,IAAZ,CAAiBzB,cAAjB,EAAiC0B,EAAjC,CAAoC,MAApC,EAA6C7C,KAAD,IAAkB;AAC1D,aAAK8C,IAAL,CAAU,SAAV,EAAqBpB,IAAI,CAACW,MAAL,CAAYrC,KAAZ,CAArB;AACH,OAFD;AAGH,KAxDgH,CA0DjH;;;AACA,QAAI,KAAKsC,YAAL,IAAqB,KAAKS,MAA9B,EAAsC;AAClC,UAAG,CAAC3B,cAAJ,EAAoBA,cAAc,GAAG,IAAIvB,kBAAJ,EAAjB,CADc,CAElC;;AACAuB,oBAAc,CAACsB,WAAf,CAA2BxB,OAAO,CAACjB,QAAR,IAAoB,MAA/C;AACA,WAAK8C,MAAL,CAAYH,IAAZ,CAAiBxB,cAAjB,EAAiCyB,EAAjC,CAAoC,MAApC,EAA6C7C,KAAD,IAAkB;AAC1D,aAAK8C,IAAL,CAAU,QAAV,EAAoBpB,IAAI,CAACY,YAAL,CAAkBtC,KAAlB,CAApB;AACH,OAFD;AAGH;;AAED,QAAI,KAAK+C,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYF,EAAZ,CAAe,MAAf,EAAuB,UAAU1C,IAAV,EAAc;AACjCwB,iBAAS,IAAI,KAAKxB,IAAlB;AACH,OAFD;AAGA,WAAK4C,MAAL,CAAYF,EAAZ,CAAe,KAAf,EAAsB;AAClBnB,YAAI,CAACsB,cAAL,GAAsB,IAAtB;AACAC,yBAAiB;AACpB,OAHD;AAIH,KARD,MAQO;AACHvB,UAAI,CAACsB,cAAL,GAAsB,IAAtB;AACH;;AAED,QAAI,KAAKL,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYE,EAAZ,CAAe,KAAf,EAAsB;AAClBnB,YAAI,CAACwB,cAAL,GAAsB,IAAtB;AACAD,yBAAiB;AACpB,OAHD;AAIH,KALD,MAKO;AACHvB,UAAI,CAACwB,cAAL,GAAsB,IAAtB;AACH;;AAED,SAAKV,YAAL,CAAkBK,EAAlB,CAAqB,OAArB,EAA8B,UAAUM,GAAV,EAAoC;AAC9DzB,UAAI,CAACoB,IAAL,CAAU,OAAV,EAAmBK,GAAnB;AACH,KAFD;AAGA,SAAKX,YAAL,CAAkBK,EAAlB,CAAqB,MAArB,EAA6B,UAAUO,IAAV,EAAgBC,MAAhB,EAAsB;AAC/C3B,UAAI,CAAC4B,QAAL,GAAgBF,IAAhB;AACA1B,UAAI,CAAC6B,UAAL,GAAkBF,MAAlB;AACAJ,uBAAiB;AACpB,KAJD;;AAMA,aAASA,iBAAT,GAA0B;AACtB,UAAI,CAACvB,IAAI,CAACsB,cAAN,IAAwB,CAACtB,IAAI,CAACwB,cAA9B,IAAiDxB,IAAI,CAAC4B,QAAL,IAAiB,IAAjB,IAAyB5B,IAAI,CAAC6B,UAAL,IAAmB,IAAjG,EAAwG;AAExG,UAAIJ,GAAJ;;AACA,UAAIzB,IAAI,CAAC4B,QAAL,IAAiB5B,IAAI,CAAC4B,QAAL,KAAkB,CAAvC,EAA0C;AACtC,YAAI3B,SAAJ,EAAe;AACXwB,aAAG,GAAGzB,IAAI,CAAC8B,UAAL,CAAgB7B,SAAhB,CAAN;AACH,SAFD,MAEO;AACHwB,aAAG,GAAG,IAAIzD,gBAAJ,CAAqB,8BAA8BgC,IAAI,CAAC4B,QAAxD,CAAN;AACH;;AACDH,WAAG,GAAqBxE,MAAM,CAACwE,GAAD,EAAM;AAChCM,oBAAU,EAAE5B,UADoB;AAEhCX,iBAAO,EAAEa,aAAa,CAACN,MAAd,GAAuBM,aAAvB,GAAuC,IAFhB;AAGhC2B,gBAAM,EAAEhC,IAAI,CAACT,UAHmB;AAIhCpC,cAAI,EAAEmD,UAAU,CAACP,MAAX,GAAoBO,UAApB,GAAiC,IAJP;AAKhCsB,kBAAQ,EAAE5B,IAAI,CAAC4B;AALiB,SAAN,CAA9B,CANsC,CAatC;;AACA,YAAI5B,IAAI,CAACiC,SAAL,CAAe,aAAf,EAA8BlC,MAA9B,IAAwC,CAACC,IAAI,CAACkC,YAAlD,EAAgE;AAC5DlC,cAAI,CAACoB,IAAL,CAAU,aAAV,EAAyBK,GAAzB;AACH;AACJ;;AAEDzB,UAAI,CAACa,UAAL,GAAkB,IAAlB;AACAb,UAAI,CAACoB,IAAL,CAAU,OAAV;AACApB,UAAI,CAACkC,YAAL,IAAqBlC,IAAI,CAACkC,YAAL,CAAkBT,GAAlB,EAAuBzB,IAAI,CAAC4B,QAA5B,EAAsC5B,IAAI,CAAC6B,UAA3C,CAArB;AACH;;AAAA;AACJ;AAwBD;;;;;;AAIwB,SAAXM,WAAW,CAACT,IAAD,EAAa;;AACjC,YAAMU,SAAS,GAAG1E,YAAY,EAA9B;AACA,YAAM2E,QAAQ,GAAG,qBAAWC,UAAX,GAAiB,yBAAyBF,SAAS,KAApE;AAEA,YAAMG,gBAAgB,GAAG,sBAAUC,cAAV,CAAzB;AACA,aAAOD,gBAAgB,CAACF,QAAD,EAAWX,IAAX,CAAhB,CAAiCe,IAAjC,CAAsC,MAAK;AAC9C,eAAO,KAAKC,eAAL,CAAqBL,QAArB,CAAP;AACH,OAFM,CAAP;AAGH;AAAA;;AAEmB,SAAbM,aAAa;AAChB,WAAO,KAAKzC,cAAL,CAAoBC,UAApB,GAAiC,KAAKD,cAAL,CAAoBC,UAArD,GAAkE,KAAKC,iBAA9E;AACH;AAED;;;;;;AAI4B,SAAfsC,eAAe,CAACL,QAAD,EAAiB;;AACzC,YAAMlC,UAAU,GAAG,KAAKwC,aAAL,EAAnB;AACA,UAAIC,cAAc,GAAG,GAAGzC,UAAU,kBAAkBkC,QAAQ,EAA5D;AACA,aAAOvE,WAAW,CAAC8E,cAAD,CAAlB;AACH;AAAA;AAED;;;;;;;;;AAOU,SAAHC,GAAG,CAACtD,UAAD,EAAqBC,OAArB,EAAwChB,QAAxC,EAAkG;AACxG,QAAIsE,OAAO,GAAG,IAAI1D,WAAJ,CAAgBG,UAAhB,EAA4BC,OAA5B,CAAd;AACA,QAAIuD,MAAM,GAAG,EAAb;AAEA,WAAOD,OAAO,CAAC3B,EAAR,CAAW,SAAX,EAAsB,UAAU6B,OAAV,EAAiB;AAC1CD,YAAM,CAAC/D,IAAP,CAAYgE,OAAZ;AACH,KAFM,EAEJC,GAFI,CAEA,UAAUxB,GAAV,EAAa;AAChB,aAAOjD,QAAQ,CAACiD,GAAG,GAAGA,GAAH,GAAS,IAAb,EAAmBsB,MAAM,CAAChD,MAAP,GAAgBgD,MAAhB,GAAyB,IAA5C,CAAf;AACH,KAJM,CAAP;AAKH;;AAED;;;;;;;AAOgB,SAATG,SAAS,CAACxB,IAAD,EAAelC,OAAf,EAAkChB,QAAlC,EAA2F;AAEvG;AACA,UAAM4D,SAAS,GAAG1E,YAAY,EAA9B;AACA,UAAM2E,QAAQ,GAAGvD,cAASwD,UAAT,GAAe,kBAAkBF,SAAS,KAA3D;AACA,4BAAcC,QAAd,EAAwBX,IAAxB;AAEA,WAAOtC,WAAW,CAACyD,GAAZ,CAAgBR,QAAhB,EAA0B7C,OAA1B,EAAmChB,QAAnC,CAAP;AACH;;AAEgB,SAAV2E,UAAU,CAAChD,UAAD,EAAoB;AACjC,QAAI,CAACA,UAAL,EAAiBA,UAAU,GAAG,KAAKwC,aAAL,EAAb;AACjB,WAAO7E,WAAW,CAACqC,UAAU,GAAG,YAAd,CAAlB;AACH;;AAEoB,SAAdiD,cAAc,CAACjD,UAAD,EAAoB;AACrC,QAAI,CAACA,UAAL,EAAiBA,UAAU,GAAG,KAAKwC,aAAL,EAAb;AACjB,WAAO,8BAASxC,UAAU,GAAG,YAAtB,EAAoCzB,QAApC,EAAP;AACH;AAED;;;;;;;AAKQoD,YAAU,CAACrD,IAAD,EAAsB;AACpC,QAAI4E,IAAI,GAAG,KAAK5E,IAAhB;AACA,QAAI6E,KAAJ;;AAEA,QAAI,aAAaC,IAAb,CAAkBF,IAAlB,CAAJ,EAA6B;AACzB;AACA,UAAIzE,KAAK,GAAGyE,IAAI,CAACvD,IAAL,GAAYjB,KAAZ,CAAkBC,QAAlB,CAAZ;AACA,UAAI0E,SAAS,GAAG5E,KAAK,CAACG,GAAN,EAAhB;AACAuE,WAAK,GAAG,IAAItF,gBAAJ,CAAqBwF,SAArB,CAAR;AACAF,WAAK,CAACG,SAAN,GAAkBhF,IAAlB,CALyB,CAMzB;;AACA6E,WAAK,CAACI,KAAN,IAAe5E,WAAU,kCAAV,GAA+CA,QAA/C,GAAyD,IAAxE;AACAwE,WAAK,CAACI,KAAN,IAAe9E,KAAK,CAACvB,KAAN,CAAY,CAAZ,EAAesG,IAAf,CAAoB7E,WAAU,IAA9B,CAAf;AACH,KATD,MASO;AACH;AACAwE,WAAK,GAAG,IAAItF,gBAAJ,CAAqBqF,IAArB,CAAR;AACH;;AAED,WAAOC,KAAP;AACH;;AAED;;;;;AAKAM,MAAI,CAACZ,OAAD,EAAyB;AACzB,QAAI,CAAC,KAAKa,KAAV,EAAiB,MAAM,IAAI5F,KAAJ,CAAU,4BAAV,CAAN;AACjB,QAAIQ,IAAI,GAAG,KAAKiC,SAAL,GAAiB,KAAKA,SAAL,CAAesC,OAAf,CAAjB,GAA2CA,OAAtD;AACA,QAAI,KAAKvC,IAAL,KAAc,QAAlB,EAA4BhC,IAAI,IAAIK,QAAR;AAC5B,SAAK+E,KAAL,CAAWC,KAAX,CAAiBrF,IAAjB;AACA,WAAO,IAAP;AACH;;AAED;;;;;AAKAwE,KAAG,CAACzE,QAAD,EAA+E;AAC9E,QAAI,KAAKsC,YAAL,CAAkB+C,KAAtB,EAA6B;AACzB,WAAK/C,YAAL,CAAkB+C,KAAlB,CAAwBZ,GAAxB;AACH;;AACD,SAAKf,YAAL,GAAoB1D,QAApB;AACA,WAAO,IAAP;AACH;;AAED;;;;AAIAuF,MAAI,CAACpC,MAAD,EAAwB;AACxB,SAAKd,UAAL,GAAkB,KAAKC,YAAL,CAAkBiD,IAAlB,CAAuBpC,MAAvB,CAAlB;AACA,WAAO,IAAP;AACH;;AAED;;;;AAIAqC,WAAS,CAACrC,MAAD,EAAwB;AAC7B;AACA,WAAO,KAAKoC,IAAL,CAAUpC,MAAV,CAAP;AACH;;AAjUwC;;AAA7CzD,kC,CAmBI;;AACOkB,gCAAoB6E,OAAO,CAACC,QAAR,IAAoB,OAApB,GAA8B,SAA9B,GAA0C,QAA9D;AAEA9E,6BAA0B,EAA1B,C,CAA8B;AAwIrC;;AACOA,qBAAS;AACZiE,MAAI,EAAE,SAASc,MAAT,CAAgB1F,IAAhB,EAAoB;AACtB,QAAI,CAACA,IAAL,EAAW,OAAO,EAAP,CAAX,KACK,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAI,CAACC,QAAL,EAAP;AACnC,WAAOD,IAAP;AACH,GALW;AAMZ2F,MAAI,EAAE,SAASC,MAAT,CAAgB5F,IAAhB,EAAoB;AACtB,WAAO6F,IAAI,CAACC,SAAL,CAAe9F,IAAf,CAAP;AACH;AARW,CAAT,C,CAWP;;AACOW,oBAAQ;AACXiE,MAAI,EAAE,SAASmB,MAAT,CAAgB/F,IAAhB,EAAoB;AACtB,WAAOA,IAAP;AACH,GAHU;AAIX2F,MAAI,EAAE,SAASK,MAAT,CAAgBhG,IAAhB,EAA4B;AAC9B,WAAO6F,IAAI,CAACI,KAAL,CAAWjG,IAAX,CAAP;AACH;AANU,CAAR;AAuJV","names":["toArray","source","Array","isArray","extend","obj","args","prototype","slice","call","arguments","forEach","key","getRandomInt","Math","floor","random","execPromise","child_process_1","PythonShellError","Error","exports","NewlineTransformer","stream_1","_transform","chunk","encoding","callback","data","toString","_lastLineData","lines","split","os_1","pop","push","bind","_flush","done","PythonShell","events_1","constructor","scriptPath","options","stdoutSplitter","stderrSplitter","resolve","type","val","trim","length","self","errorData","defaultOptions","pythonPath","defaultPythonPath","pythonOptions","scriptArgs","command","concat","mode","formatter","parser","stderrParser","terminated","childProcess","name","setEncoding","stdout","pipe","on","emit","stderr","stderrHasEnded","terminateIfNeeded","stdoutHasEnded","err","code","signal","exitCode","exitSignal","parseError","executable","script","listeners","_endCallback","checkSyntax","randomInt","filePath","path_1","writeFilePromise","fs_1","then","checkSyntaxFile","getPythonPath","compileCommand","run","pyshell","output","message","end","runString","getVersion","getVersionSync","text","error","test","exception","traceback","stack","join","send","stdin","write","kill","terminate","process","platform","toText","json","toJson","JSON","stringify","asText","asJson","parse"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}