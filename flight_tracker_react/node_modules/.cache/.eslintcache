[{"/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/index.js":"1","/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/App.js":"2","/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/reportWebVitals.js":"3","/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/pages/HomePage.js":"4","/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/pages/ResultsPage.js":"5","/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/components/LoadingSpinner.js":"6"},{"size":500,"mtime":1682356126087,"results":"7","hashOfConfig":"8"},{"size":510,"mtime":1646612788085,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1644436513117,"results":"11","hashOfConfig":"10"},{"size":6233,"mtime":1682361455769,"results":"12","hashOfConfig":"8"},{"size":6754,"mtime":1682361455767,"results":"13","hashOfConfig":"8"},{"size":281,"mtime":1682356168565,"results":"14","hashOfConfig":"8"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i2nv55",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"avs5yw",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/index.js",[],[],"/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/App.js",[],[],"/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/reportWebVitals.js",[],[],"/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/pages/HomePage.js",[],[],"/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/pages/ResultsPage.js",["34"],[],"import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from 'react-router-dom';\nimport { Table, Container, Row, Col, Button, Form, Navbar } from 'react-bootstrap';\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\n\n\nfunction ResultsPage() {\n\n    // retrieve payload from HomePage via useNavigate\n    const location = useLocation();\n\n    // initialize state variables\n    const [displayData, setDisplayData] = useState([]);\n    const [passData, setPassData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    let flightParams = location.state.flights['request']['params'];\n    let flightData = location.state.flights['data'];\n    let carrierCodes = [];\n    let prices = [];\n    let totalData = [];\n    let airCarrierCode = '';\n\n    // fetches results route to store flight data to database\n    const createFlightResults = async () => {\n        const newFlightResults = {passData};\n        const response = await fetch('/results', {\n            method: 'POST', \n            body: JSON.stringify(newFlightResults),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        // error handling with response status check\n        if (response.status !== 201) {\n            alert(`Failed to add the flights. Status code = ${response.status}`);\n        }\n    }\n\n    \n    // calls the carrier route to call Amadeus API to translate IATA code to air carrier business name\n    const getAirCarrier = async(carrier_code) => {\n        let data = null\n\n        // fetch air carrier name via IATA code through Amadeus API\n        await fetch('/carrier', {\n            method: 'POST', \n            body: JSON.stringify(carrier_code),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        .then(response => response.json())\n        .then(payload_data => {\n<<<<<<< HEAD\n            //console.log(payload_data);\n=======\n            console.log(payload_data);\n>>>>>>> aa4024df597c928d5d64961887789a120e844fff\n            data = payload_data;\n        })\n\n        return data;\n    }\n\n    // retrieves relevant data from payload and displays data on table on ResultsPage.\n    // then sets passData state variable to array of all flights.\n    const loadFlight = async () => {\n        const delay = (ms = 1000) => new Promise((r) => setTimeout(r, ms));\n\n        for (let i = 0; i < flightData.length; i++) {\n            let dict = {}\n\n            // store IATA code for getAirCarrier function\n            airCarrierCode = flightData[i]['validatingAirlineCodes'][0];\n\n            // call getAirCarrier function, and retrieve air carrier name based on IATA code\n            await delay();\n            const result = await getAirCarrier({airCarrierCode});\n\n            // append all relevant table data to dict\n            dict._id = flightData[i]['id'];\n            dict.airCarrier = result['data'][0]['businessName'];\n            dict.departAirport = flightParams['originLocationCode'];\n            dict.arriveAirport = flightParams['destinationLocationCode'];\n            dict.departDate = flightParams['departureDate'];\n            dict.returnDate = flightParams['returnDate'];\n            dict.price = flightData[i]['price']['total'];\n            dict.seatsLeft = flightData[i]['numberOfBookableSeats'];\n            \n            // if price is unique, add dictionary to dict\n            if (prices.includes(flightData[i]['price']['total']) !== true) {\n                totalData.push(dict);\n            }\n            // if carrier code is unique, append to carrierCodes array\n            if (carrierCodes.includes(airCarrierCode) !== true) {\n                carrierCodes.push(airCarrierCode);\n            }\n            // if price is unique, append to prices array\n            if (prices.includes(flightData[i]['price']['total']) !== true) {\n                prices.push(flightData[i]['price']['total']);\n            }\n        }\n\n        // set the state variable to pass the data to the database.\n        setPassData(totalData);\n\n        return totalData\n    }\n\n    // renders page and updates page on each displayData state variable update\n    useEffect(() => {\n        (async () => {\n            const data = await loadFlight();\n            if (data) {\n                setDisplayData(data);\n            }\n            setLoading(false);\n            createFlightResults();\n        })();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"results\">\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"/results\">\n                    Flight Results\n                    </Navbar.Brand>\n                </Container>\n            </Navbar>\n            <Container>\n                <Form className=\"mt-3\">\n                    <Row>\n                        <Table>\n                            <thead>\n                                <tr>\n                                    <th>Air Carrier</th>\n                                    <th>Departing Airport</th>\n                                    <th>Arriving Airport</th>\n                                    <th>Departing Date</th>\n                                    <th>Return Date</th>\n                                    <th>Price</th>\n                                    <th>Seats Left</th>\n                                </tr>\n                            </thead>\n                            {loading ? <LoadingSpinner /> : \n                            <tbody>\n                                {displayData.map((data) => (\n                                    <tr key={data._id}>\n                                        <td>{data.airCarrier}</td>\n                                        <td>{data.departAirport}</td>\n                                        <td>{data.arriveAirport}</td>\n                                        <td>{data.departDate}</td>\n                                        <td>{data.returnDate}</td>\n                                        <td>{data.price}</td>\n                                        <td>{data.seatsLeft}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                            }\n                        </Table>\n                    </Row>\n                    <Row className=\"mt-3\">\n                        <Col>\n                            <Link to=\"/\">\n                                <Button>Back To Homepage</Button>\n                            </Link>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </div>           \n    );\n}\n\nexport default ResultsPage;\n","/Users/eberman/pteranodon/school/CS_361/Flight-Tracker/flight_tracker_react/src/components/LoadingSpinner.js",[],[],{"ruleId":null,"fatal":true,"severity":2,"message":"35","line":56,"column":1},"Parsing error: Unexpected token (56:1)"]